(()=>{"use strict";var e={312:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(862)),a=document.getElementById("gfx"),{width:s,height:o}=a.getBoundingClientRect();a.width=s,a.height=o,new r.default(a).start()},862:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function s(e){try{u(i.next(e))}catch(e){a(e)}}function o(e){try{u(i.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}u((i=i.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(861)),s=r(n(535)),o=r(n(600)),u={vertices:new Float32Array([1,-1,0,-1,-1,0,-1,1,0,1,1,0]),uvs:new Float32Array([1,1,0,1,0,0,1,0]),indices:new Uint16Array([0,1,2,2,3,0])},d=(e,t,n)=>{let i={size:t.byteLength+3&-4,usage:n,mappedAtCreation:!0},r=e.createBuffer(i);return(t instanceof Uint16Array?new Uint16Array(r.getMappedRange()):new Float32Array(r.getMappedRange())).set(t),r.unmap(),r},l=512,c=Math.ceil(8);t.default=class{constructor(e){this.pingpong=0,this.render=()=>{this.encodeDecayCommands(),this.encodeAgentComputeCommands(),this.encodeBlitCommands(),this.pingpong=this.pingpong?0:1,requestAnimationFrame(this.render)},this.canvas=e}start(){return i(this,void 0,void 0,(function*(){(yield this.initializeAPI())&&(this.resizeBackings(),this.initializeBlitResources(),this.initializeAgentResources(),this.render())}))}initializeAPI(){return i(this,void 0,void 0,(function*(){try{const e=navigator.gpu;if(!e)return!1;this.adapter=yield e.requestAdapter(),this.device=yield this.adapter.requestDevice({requiredFeatures:["float32-filterable"]}),this.queue=this.device.queue}catch(e){return console.error(e),!1}return!0}))}initializeAgentResources(){const e=new Float32Array(2048);for(let t=0;t<512;t+=4){const n=2*Math.random()*Math.PI;e[t+0]=Math.random()*l,e[t+1]=Math.random()*l,e[t+2]=Math.sin(n)*l/10,e[t+3]=Math.cos(n)*l/10}this.agentBuffers=[{buffer:d(this.device,e,GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE)},{buffer:d(this.device,e,GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE)}];const t=this.device.createShaderModule({code:s.default}),n=this.device.createShaderModule({code:o.default}),i=this.device.createBindGroupLayout({label:"AgentFieldBindGroup",entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]}),r=this.device.createPipelineLayout({bindGroupLayouts:[i]}),a=new Float32Array(1048576);a.fill(.2);a[20520]=1,a[20521]=0,a[20522]=0,a[20523]=1;const u={label:"AgentFieldTexture",size:[l,l,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,format:"rgba32float"},c=this.device.createSampler(),f=()=>{const e=this.device.createTexture(u),t=e.createView(),n=this.device.createBindGroup({label:"AgentFieldBindGroup",layout:i,entries:[{binding:0,resource:c},{binding:1,resource:t}]});return this.device.queue.writeTexture({texture:e},a,{bytesPerRow:8192},{width:l,height:l}),{texture:e,view:t,bindGroup:n}};this.agentFieldTextures=[f(),f()];const g={label:"DecayPipeline",layout:r,vertex:{module:t,entryPoint:"vs_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"}]},fragment:{module:t,entryPoint:"fs_main",targets:[{format:"rgba32float"}]},primitive:{frontFace:"cw",cullMode:"none",topology:"triangle-list"}};this.agentFieldPipeline=this.device.createRenderPipeline(g);const p=this.device.createBindGroupLayout({label:"AgentUpdate",entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform",minBindingSize:4}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage",minBindingSize:8192}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage",minBindingSize:8192}},{binding:3,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba32float",viewDimension:"2d"}},{binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:"rgba32float",viewDimension:"2d"}}]});this.agentComputeParams=d(this.device,new Float32Array([.0166]),GPUBufferUsage.UNIFORM),this.agentBindGroups=new Array(2).fill(0).map(((e,t)=>{const n=this.agentFieldTextures[t],i=this.agentFieldTextures[(t+1)%2],r=this.agentBuffers[t],a=this.agentBuffers[(t+1)%2];return{bindGroup:this.device.createBindGroup({label:`AgentCompute${t}`,layout:p,entries:[{binding:0,resource:{buffer:this.agentComputeParams}},{binding:1,resource:{buffer:r.buffer}},{binding:2,resource:{buffer:a.buffer}},{binding:3,resource:n.view},{binding:4,resource:i.view}]})}})),this.agentComputePipeline=this.device.createComputePipeline({label:"AgentCompute",compute:{module:n,entryPoint:"compute_main"},layout:this.device.createPipelineLayout({bindGroupLayouts:[p]})})}initializeBlitResources(){this.unitSquare={positionBuffer:d(this.device,u.vertices,GPUBufferUsage.VERTEX),uvBuffer:d(this.device,u.uvs,GPUBufferUsage.VERTEX),indexBuffer:d(this.device,u.indices,GPUBufferUsage.INDEX)},this.blitModule=this.device.createShaderModule({code:a.default});const e={bindGroupLayouts:[this.device.createBindGroupLayout({label:"BlitBindGroupLayout",entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]})]},t=this.device.createPipelineLayout(e),n={module:this.blitModule,entryPoint:"vs_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"}]},i={format:navigator.gpu.getPreferredCanvasFormat()},r={label:"BlitPipeline",layout:t,vertex:n,fragment:{module:this.blitModule,entryPoint:"fs_main",targets:[i]},primitive:{frontFace:"cw",cullMode:"none",topology:"triangle-list"}};this.pipeline=this.device.createRenderPipeline(r)}resizeBackings(){if(!this.context){this.context=this.canvas.getContext("webgpu");const e={device:this.device,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:"opaque"};this.context.configure(e)}}encodeAgentComputeCommands(){const e=this.device.createCommandEncoder({label:"AgentCompute"}),t=e.beginComputePass();t.setPipeline(this.agentComputePipeline),t.setBindGroup(0,this.agentBindGroups[this.pingpong].bindGroup),t.dispatchWorkgroups(c,1,1),t.end(),this.queue.submit([e.finish()])}encodeDecayCommands(){const e=this.device.createCommandEncoder(),t=e.beginRenderPass({label:"DecayPass",colorAttachments:[{view:this.agentFieldTextures[(this.pingpong+1)%2].view,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]});t.setPipeline(this.agentFieldPipeline),t.setViewport(0,0,l,l,0,1),t.setScissorRect(0,0,l,l),t.setBindGroup(0,this.agentFieldTextures[this.pingpong].bindGroup),t.setVertexBuffer(0,this.unitSquare.positionBuffer),t.setVertexBuffer(1,this.unitSquare.uvBuffer),t.setIndexBuffer(this.unitSquare.indexBuffer,"uint16"),t.drawIndexed(6,1),t.end(),this.queue.submit([e.finish()])}encodeBlitCommands(){const e={colorAttachments:[{view:this.context.getCurrentTexture().createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},t=this.device.createCommandEncoder(),n=t.beginRenderPass(e);n.setPipeline(this.pipeline),n.setViewport(0,0,this.canvas.width,this.canvas.height,0,1),n.setScissorRect(0,0,this.canvas.width,this.canvas.height),n.setBindGroup(0,this.agentFieldTextures[this.pingpong].bindGroup),n.setVertexBuffer(0,this.unitSquare.positionBuffer),n.setVertexBuffer(1,this.unitSquare.uvBuffer),n.setIndexBuffer(this.unitSquare.indexBuffer,"uint16"),n.drawIndexed(6,1),n.end(),this.queue.submit([t.finish()])}}},600:e=>{e.exports="// Compute shader\n\nstruct Agent {\n    pos: vec2<f32>,\n    vel: vec2<f32>,\n};\n\nstruct SimParams {\n    deltaT: f32,\n//     rule1Distance: f32,\n//     rule2Distance: f32,\n//     rule3Distance: f32,\n//     rule1Scale: f32,\n//     rule2Scale: f32,\n//     rule3Scale: f32,\n};\n\nstruct ComputeIn {\n    @builtin(global_invocation_id) global_invocation_id: vec3<u32>,\n};\n\n@group(0) @binding(0) var<uniform> params : SimParams;\n@group(0) @binding(1) var<storage, read> agentsSrc : array<Agent>;\n@group(0) @binding(2) var<storage, read_write> agentsDst : array<Agent>;\n@group(0) @binding(3) var fieldSrc : texture_2d<f32>;\n@group(0) @binding(4) var fieldDst : texture_storage_2d<rgba32float, write>;\n\n// const PI: f32 = 3.14159274;\nconst TWO_PI: f32 = 6.28318548;\nconst AGENT_FIELD_SIZE: f32 = 512.0;\nconst AGENT_SPEED: f32 = AGENT_FIELD_SIZE / 10.0; // field units/second\n\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfn rand(n: f32) -> f32 {\n    return fract(sin(n) * 43758.5453123);\n}\n\nfn random_angle(in: f32) -> vec2<f32> {\n    let angle = rand(in) * TWO_PI;\n\n    return vec2<f32>(\n        cos(angle),\n        sin(angle),\n    ) * AGENT_SPEED;\n}\n\n@compute\n@workgroup_size(64)\nfn compute_main(in: ComputeIn) {\n    let total = arrayLength(&agentsSrc);\n    let index = in.global_invocation_id.x;\n    // TODO: What is this guarding against?\n    if index >= total {\n        return;\n    }\n\n    var vel = agentsSrc[index].vel;\n    var pos = agentsSrc[index].pos + vel * params.deltaT;\n\n\n    // // Keep particles in bounds\n    if pos.x < 0 || pos.x > AGENT_FIELD_SIZE || pos.y < 0 || pos.y > AGENT_FIELD_SIZE {\n        pos = clamp(pos, vec2<f32>(0, 0), vec2<f32>(AGENT_FIELD_SIZE, AGENT_FIELD_SIZE)); // Reset position and pick a new angle\n\n        // Random bounce angle\n        vel = random_angle(vel.x + vel.y + index);\n        // vel = -vel;\n    }\n\n\n    // // Update agent\n    agentsDst[index] = Agent(pos, vel);\n\n    // Write data to field\n    // textureStore(fieldDst, vec2<u32>(12, 12), vec4<f32>(1.0));\n    textureStore(fieldDst, vec2<i32>(pos), vec4(1.0));\n}\n"},861:e=>{e.exports="struct VertexInput {\n    @location(0) pos: vec3f,\n    @location(1) uv: vec2f,\n}\n\nstruct VertexOutput {\n    @builtin(position) pos: vec4f,\n    @location(0) uv: vec2f,\n };\n\n@vertex\nfn vs_main(in: VertexInput) -> VertexOutput {\n    var out: VertexOutput;\n\n    out.pos = vec4f(in.pos, 1);\n    out.uv = in.uv;\n\n    return out;\n}\n\n@group(0) @binding(0) var fieldSampler: sampler;\n@group(0) @binding(1) var fieldTexture: texture_2d<f32>;\n\n@fragment\nfn fs_main(in: VertexOutput) -> @location(0) vec4f {\n    return vec4(textureSample(fieldTexture, fieldSampler, in.uv).rgb, 1.0);\n}\n"},535:e=>{e.exports="struct VertexInput {\n    @location(0) pos: vec3f,\n    @location(1) uv: vec2f,\n}\n\nstruct VertexOutput {\n    @builtin(position) pos: vec4f,\n    @location(0) uv: vec2f,\n };\n\n@vertex\nfn vs_main(in: VertexInput) -> VertexOutput {\n    var out: VertexOutput;\n\n    out.pos = vec4f(in.pos, 1);\n    out.uv = in.uv;\n\n    return out;\n}\n\n@group(0) @binding(0) var fieldSampler: sampler;\n@group(0) @binding(1) var fieldTexture: texture_2d<f32>;\n\n@fragment\nfn fs_main(in: VertexOutput) -> @location(0) vec4f {\n    return textureSample(fieldTexture, fieldSampler, in.uv) * 0.99;\n}\n"}},t={};!function n(i){var r=t[i];if(void 0!==r)return r.exports;var a=t[i]={exports:{}};return e[i].call(a.exports,a,a.exports,n),a.exports}(312)})();